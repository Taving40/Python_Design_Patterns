from __future__ import annotations
from abc import ABC #abstract base class (deriving from this results in an abstract class)
from random import randrange

"""The Solution, when you might need to reuse certain instantiating strategies 
or when you are unsure about how to instantiate the objects and need some logic to do it, 
is to let the Factory class (that has methods which return objects) handle it. """


class IAnimal(ABC):
    def sound(self):
        pass

class Dog(IAnimal):
    def sound(self):
        return "bark"

class Cat(IAnimal):
    def sound(self):
        return "meow"

class Duck(IAnimal):
    def sound(self):
        return "quack"

class IAnimalFactory(ABC):
    """The Factory class should have responsibility of HOW the objects get constructed"""
    def createAnimal(self):
        """Method that should return an animal"""
        pass

class RandomAnimalFactory(IAnimalFactory):
    """Factory class for instantiating IAnimal type objects randomly"""

    def createAnimal():
        flag = randrange(0, 2)
        if flag == 0:
            return Dog()
        elif flag == 1:
            return Cat()
        else:
            return Duck()
    
class BalancedAnimalFactory(IAnimalFactory):
    """Balanced factory that ensures at every third creation the number of one subclass of animals is equal to the others"""

    def __init__(self) -> None:
        self.unbalanced = [[Dog(), True], [Cat(), True], [Duck(), True]]
        
    def createAnimal(self):
        """Create an animal only from those whose number is less than the others. 
        If you created a dog next you can only randomly create a cat or a duck."""
        choosable = []
        for i in range(3):
            if self.unbalanced[i][1]:
                choosable.append(self.unbalanced[i][0])
        chosen = randrange(len(choosable))
        return choosable[chosen]
            
            
def main():

    balanced_fac = BalancedAnimalFactory()

    balanced_animals = [balanced_fac.createAnimal() for _ in range(6)]
    random_animals = [RandomAnimalFactory.createAnimal() for _ in range(6)]

    print("Animals generated by balanced factory: \n\n")
    for i in range(len(balanced_animals)):
        print (balanced_animals[i].sound())

    print("\n\nAnimals generated by random factory: \n\n")
    for i in range(len(random_animals)):
        print (random_animals[i].sound())

if __name__ == "__main__":
    main()